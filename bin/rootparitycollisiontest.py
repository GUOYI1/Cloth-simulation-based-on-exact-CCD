# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rootparitycollisiontest')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rootparitycollisiontest')
    _rootparitycollisiontest = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rootparitycollisiontest', [dirname(__file__)])
        except ImportError:
            import _rootparitycollisiontest
            return _rootparitycollisiontest
        try:
            _mod = imp.load_module('_rootparitycollisiontest', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rootparitycollisiontest = swig_import_helper()
    del swig_import_helper
else:
    import _rootparitycollisiontest
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class vec3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _rootparitycollisiontest.vec3d_first_set
    __swig_getmethods__["first"] = _rootparitycollisiontest.vec3d_first_get
    if _newclass:
        first = _swig_property(_rootparitycollisiontest.vec3d_first_get, _rootparitycollisiontest.vec3d_first_set)

    def __init__(self, *args):
        this = _rootparitycollisiontest.new_vec3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rootparitycollisiontest.delete_vec3d
    __del__ = lambda self: None
vec3d_swigregister = _rootparitycollisiontest.vec3d_swigregister
vec3d_swigregister(vec3d)

class RootParityCollisionTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RootParityCollisionTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RootParityCollisionTest, name)
    __repr__ = _swig_repr

    def __init__(self, x0old, x1old, x2old, x3old, x0new, x1new, x2new, x3new, is_edge_edge):
        this = _rootparitycollisiontest.new_RootParityCollisionTest(x0old, x1old, x2old, x3old, x0new, x1new, x2new, x3new, is_edge_edge)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run_test(self):
        return _rootparitycollisiontest.RootParityCollisionTest_run_test(self)

    def edge_edge_collision(self):
        return _rootparitycollisiontest.RootParityCollisionTest_edge_edge_collision(self)

    def point_triangle_collision(self):
        return _rootparitycollisiontest.RootParityCollisionTest_point_triangle_collision(self)
    __swig_destroy__ = _rootparitycollisiontest.delete_RootParityCollisionTest
    __del__ = lambda self: None
RootParityCollisionTest_swigregister = _rootparitycollisiontest.RootParityCollisionTest_swigregister
RootParityCollisionTest_swigregister(RootParityCollisionTest)


def aabb_contains_origin(xmin, xmax):
    return _rootparitycollisiontest.aabb_contains_origin(xmin, xmax)
aabb_contains_origin = _rootparitycollisiontest.aabb_contains_origin

def aabb_test(xmin, xmax, oxmin, oxmax):
    return _rootparitycollisiontest.aabb_test(xmin, xmax, oxmin, oxmax)
aabb_test = _rootparitycollisiontest.aabb_test
M_PI = _rootparitycollisiontest.M_PI
class IntervalBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rootparitycollisiontest.delete_IntervalBase
    __del__ = lambda self: None

    def stored_left(self):
        return _rootparitycollisiontest.IntervalBase_stored_left(self)

    def stored_right(self):
        return _rootparitycollisiontest.IntervalBase_stored_right(self)

    def get_actual_interval(self):
        return _rootparitycollisiontest.IntervalBase_get_actual_interval(self)

    def get_internal_representation(self):
        return _rootparitycollisiontest.IntervalBase_get_internal_representation(self)

    def contains_zero(self):
        return _rootparitycollisiontest.IntervalBase_contains_zero(self)

    def indefinite_sign(self):
        return _rootparitycollisiontest.IntervalBase_indefinite_sign(self)

    def is_certainly_negative(self):
        return _rootparitycollisiontest.IntervalBase_is_certainly_negative(self)

    def is_certainly_positive(self):
        return _rootparitycollisiontest.IntervalBase_is_certainly_positive(self)

    def is_certainly_zero(self):
        return _rootparitycollisiontest.IntervalBase_is_certainly_zero(self)

    def certainly_opposite_sign(self, other):
        return _rootparitycollisiontest.IntervalBase_certainly_opposite_sign(self, other)

    def same_sign(self, other):
        return _rootparitycollisiontest.IntervalBase_same_sign(self, other)

    def estimate(self):
        return _rootparitycollisiontest.IntervalBase_estimate(self)
IntervalBase_swigregister = _rootparitycollisiontest.IntervalBase_swigregister
IntervalBase_swigregister(IntervalBase)


def same_sign(a, b):
    return _rootparitycollisiontest.same_sign(a, b)
same_sign = _rootparitycollisiontest.same_sign
class Interval(IntervalBase):
    __swig_setmethods__ = {}
    for _s in [IntervalBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interval, name, value)
    __swig_getmethods__ = {}
    for _s in [IntervalBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Interval, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _rootparitycollisiontest.Interval_v_set
    __swig_getmethods__["v"] = _rootparitycollisiontest.Interval_v_get
    if _newclass:
        v = _swig_property(_rootparitycollisiontest.Interval_v_get, _rootparitycollisiontest.Interval_v_set)

    def __init__(self, *args):
        this = _rootparitycollisiontest.new_Interval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rootparitycollisiontest.delete_Interval
    __del__ = lambda self: None

    def stored_left(self):
        return _rootparitycollisiontest.Interval_stored_left(self)

    def stored_right(self):
        return _rootparitycollisiontest.Interval_stored_right(self)

    def __iadd__(self, rhs):
        return _rootparitycollisiontest.Interval___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _rootparitycollisiontest.Interval___isub__(self, rhs)

    def __imul__(self, rhs):
        return _rootparitycollisiontest.Interval___imul__(self, rhs)

    def __add__(self, other):
        return _rootparitycollisiontest.Interval___add__(self, other)

    def __sub__(self, other):
        return _rootparitycollisiontest.Interval___sub__(self, other)

    def __mul__(self, other):
        return _rootparitycollisiontest.Interval___mul__(self, other)

    def __neg__(self):
        return _rootparitycollisiontest.Interval___neg__(self)
    if _newclass:
        begin_special_arithmetic = staticmethod(_rootparitycollisiontest.Interval_begin_special_arithmetic)
    else:
        begin_special_arithmetic = _rootparitycollisiontest.Interval_begin_special_arithmetic
    if _newclass:
        end_special_arithmetic = staticmethod(_rootparitycollisiontest.Interval_end_special_arithmetic)
    else:
        end_special_arithmetic = _rootparitycollisiontest.Interval_end_special_arithmetic
Interval_swigregister = _rootparitycollisiontest.Interval_swigregister
Interval_swigregister(Interval)

def Interval_begin_special_arithmetic():
    return _rootparitycollisiontest.Interval_begin_special_arithmetic()
Interval_begin_special_arithmetic = _rootparitycollisiontest.Interval_begin_special_arithmetic

def Interval_end_special_arithmetic():
    return _rootparitycollisiontest.Interval_end_special_arithmetic()
Interval_end_special_arithmetic = _rootparitycollisiontest.Interval_end_special_arithmetic


def negative(input, output):
    return _rootparitycollisiontest.negative(input, output)
negative = _rootparitycollisiontest.negative

def sign(a):
    return _rootparitycollisiontest.sign(a)
sign = _rootparitycollisiontest.sign

def is_zero(a):
    return _rootparitycollisiontest.is_zero(a)
is_zero = _rootparitycollisiontest.is_zero

def add(*args):
    return _rootparitycollisiontest.add(*args)
add = _rootparitycollisiontest.add

def subtract(*args):
    return _rootparitycollisiontest.subtract(*args)
subtract = _rootparitycollisiontest.subtract

def multiply(*args):
    return _rootparitycollisiontest.multiply(*args)
multiply = _rootparitycollisiontest.multiply

def compress(e, h):
    return _rootparitycollisiontest.compress(e, h)
compress = _rootparitycollisiontest.compress

def divide(x, y, q):
    return _rootparitycollisiontest.divide(x, y, q)
divide = _rootparitycollisiontest.divide

def remove_zeros(a):
    return _rootparitycollisiontest.remove_zeros(a)
remove_zeros = _rootparitycollisiontest.remove_zeros

def estimate(a):
    return _rootparitycollisiontest.estimate(a)
estimate = _rootparitycollisiontest.estimate

def equals(a, b):
    return _rootparitycollisiontest.equals(a, b)
equals = _rootparitycollisiontest.equals

def print_full(e):
    return _rootparitycollisiontest.print_full(e)
print_full = _rootparitycollisiontest.print_full
class expansion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, expansion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, expansion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _rootparitycollisiontest.expansion_v_set
    __swig_getmethods__["v"] = _rootparitycollisiontest.expansion_v_get
    if _newclass:
        v = _swig_property(_rootparitycollisiontest.expansion_v_get, _rootparitycollisiontest.expansion_v_set)

    def __init__(self, *args):
        this = _rootparitycollisiontest.new_expansion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rootparitycollisiontest.delete_expansion
    __del__ = lambda self: None

    def __iadd__(self, rhs):
        return _rootparitycollisiontest.expansion___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _rootparitycollisiontest.expansion___isub__(self, rhs)

    def __imul__(self, rhs):
        return _rootparitycollisiontest.expansion___imul__(self, rhs)

    def __add__(self, other):
        return _rootparitycollisiontest.expansion___add__(self, other)

    def __sub__(self, other):
        return _rootparitycollisiontest.expansion___sub__(self, other)

    def __mul__(self, other):
        return _rootparitycollisiontest.expansion___mul__(self, other)

    def __neg__(self):
        return _rootparitycollisiontest.expansion___neg__(self)

    def estimate(self):
        return _rootparitycollisiontest.expansion_estimate(self)

    def indefinite_sign(self):
        return _rootparitycollisiontest.expansion_indefinite_sign(self)
    if _newclass:
        begin_special_arithmetic = staticmethod(_rootparitycollisiontest.expansion_begin_special_arithmetic)
    else:
        begin_special_arithmetic = _rootparitycollisiontest.expansion_begin_special_arithmetic
    if _newclass:
        end_special_arithmetic = staticmethod(_rootparitycollisiontest.expansion_end_special_arithmetic)
    else:
        end_special_arithmetic = _rootparitycollisiontest.expansion_end_special_arithmetic

    def clear(self):
        return _rootparitycollisiontest.expansion_clear(self)

    def resize(self, new_size):
        return _rootparitycollisiontest.expansion_resize(self, new_size)
expansion_swigregister = _rootparitycollisiontest.expansion_swigregister
expansion_swigregister(expansion)

def expansion_begin_special_arithmetic():
    return _rootparitycollisiontest.expansion_begin_special_arithmetic()
expansion_begin_special_arithmetic = _rootparitycollisiontest.expansion_begin_special_arithmetic

def expansion_end_special_arithmetic():
    return _rootparitycollisiontest.expansion_end_special_arithmetic()
expansion_end_special_arithmetic = _rootparitycollisiontest.expansion_end_special_arithmetic


def make_expansion(a, e):
    return _rootparitycollisiontest.make_expansion(a, e)
make_expansion = _rootparitycollisiontest.make_expansion

def make_zero(e):
    return _rootparitycollisiontest.make_zero(e)
make_zero = _rootparitycollisiontest.make_zero

def create_from_double(*args):
    return _rootparitycollisiontest.create_from_double(*args)
create_from_double = _rootparitycollisiontest.create_from_double

def certainly_opposite_sign(*args):
    return _rootparitycollisiontest.certainly_opposite_sign(*args)
certainly_opposite_sign = _rootparitycollisiontest.certainly_opposite_sign
# This file is compatible with both classic and new-style classes.


